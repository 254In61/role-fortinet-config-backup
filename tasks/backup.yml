---
# STEP 1. Use SSH to create a rest-api-admin user on the fly. *** Assumption == account for ssh has the rights to do this ***
# STEP 2. Use SSH to generate rest-api-admin user token
# STEP 3. Use SSH to Enable https accessibility
# STEP 4. Extract API token from command output
# STEP 5. Extract running configs for {{ inventory_hostname }} using REST API Call
# STEP 6. Use ssh to emove rest-api-admin user
# STEP 7. Git operations

- name: Set varibales
  ansible.builtin.set_fact:
    ansible_connection: ssh           # Change connection type to ssh
    api_admin_user: rest-api-admin    # the account is created on the fly and then deleted
    mgmt_vdom: root
  delegate_to: localhost
  ignore_errors: true # You want the role to run end to end

- name: Use SSH to create a rest-api-admin user
  ansible.builtin.raw: |
    config global
    config system api-user
    edit {{ api_admin_user }}
    set accprofile "super_admin"
    set vdom {{ mgmt_vdom }}
    next
    end
  register: create_user
  ignore_errors: true # You want the role to run end to end
  no_log: false

# - name: Debug create_user output
#   ansible.builtin.debug:
#     var: create_user

- name: Use SSH to generate rest-api-admin user token
  ansible.builtin.raw: |
    config global
    execute api-user generate-key {{ api_admin_user }}
  register: generate_token
  ignore_errors: true # You want the role to run end to end
  no_log: false

# HTTPS already enabled on the devices
# - name: Use SSH to Enable https accessibility
#   ansible.builtin.raw: |
#     config system interface
#     edit "port1"
#     set allowaccess https
#   register: https_config
#   ignore_errors: true # You want the role to run end to end
    

# - name: Debug generate_token output
#   ansible.builtin.debug:
#     var: generate_token

- name: Set API token value extracted from command output
  ansible.builtin.set_fact:
    api_token: "{{ generate_token.stdout | regex_search('New API key: (\\w+)', '\\1') }}" #generates a list
  delegate_to: localhost
  ignore_errors: true # You want the role to run end to end

# - name: Display the extracted API token
#   ansible.builtin.debug:
#     msg: 
#       - "API Token      = {{ api_token[0] }}"
#       - "API Admin User = {{ api_admin_user }}"

# Using ansible_host on the URL.
# Ansible Controller seem not to resolve some DNS names on the URL

- name: Debug urls to confirm
  ansible.builtin.debug:
    msg: "{{ inventory_hostname }} URL : https://{{ ansible_host }}/api/v2/monitor/system/config/backup"
  delegate_to: localhost

- name: Extract running configs using REST API Call
  ansible.builtin.uri:
    url: "https://{{ ansible_host }}/api/v2/monitor/system/config/backup"
    method: POST
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ api_token[0] }}"
    body:
      scope: "global"
    body_format: "json"
    validate_certs: false
    return_content: true
  register: fortios_config
  delegate_to: localhost
  ignore_errors: true # You want the role to run end to end

# - name: Debug fortios_config output
#   ansible.builtin.debug:
#     var: fortios_config
#   delegate_to: localhost

- name: Save the configuration to the temporary config store
  ansible.builtin.copy:
    content: "{{ fortios_config.content }}"
    dest: "{{ _local_file_path_ }}"
  delegate_to: localhost
  ignore_errors: true
  when: fortios_config["failed"] == false

- name: Use ssh to remove rest-api-admin user
  ansible.builtin.raw: |
    config global
    config system api-user
    delete {{ api_admin_user }}
    end
  register: remove_user
  no_log: false
  ignore_errors: true # You don't want all of them failing if first 2-3 fails